generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  prettier                        = "true"
  entityPrefix                    = ""
  reExport                        = "false"
  outputType                      = "class"
  exportRelationModifierClasses   = "true"
  requiredResponseApiProperty     = "true"
  definiteAssignmentAssertion     = "false"
  flatResourceStructure           = "false"
  dtoSuffix                       = "Dto"
  outputApiPropertyType           = "true"
  noDependencies                  = "false"
  updateDtoPrefix                 = "Update"
  entitySuffix                    = ""
  classValidation                 = "true"
  outputToNestJsResourceStructure = "true"
  generateFileTypes               = "all"
  fileNamingStyle                 = "kebab"
  createDtoPrefix                 = "Create"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BusCrews {
  id        Int       @id
  userId    Int       @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  busId     Int       @map("bus_id")
  buses     Buses     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bus_crews_bus_id_fkey")
  users     Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("bus_crews")
}

model Buses {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(100)
  startDatetime DateTime       @map("start_datetime") @db.Timestamp(6)
  endDatetime   DateTime       @map("end_datetime") @db.Timestamp(6)
  description   String?
  status        BusStatusTypes
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?      @default(now()) @map("updated_at") @db.Timestamp(6)
  isPrivate     Boolean        @default(false) @map("is_private")
  password      String?        @db.VarChar(100)
  userId        Int            @map("user_id")
  busCrews      BusCrews?
  users         Users          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")

  @@map("buses")
}

model Friendships {
  userId                          Int                   @map("user_id")
  friendId                        Int                   @map("friend_id")
  status                          FriendshipStatusTypes @default(pending)
  createdAt                       DateTime?             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                       DateTime?             @default(now()) @map("updated_at") @db.Timestamp(6)
  usersFriendshipsFriendIdTousers Users                 @relation("friendships_friend_idTousers", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usersFriendshipsUserIdTousers   Users                 @relation("friendships_user_idTousers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, friendId])
  @@map("friendships")
}

model Notifications {
  id        Int       @id @default(autoincrement())
  userId    Int?      @map("user_id")
  message   String
  isRead    Boolean?  @default(false) @map("is_read")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  users     Users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notifications")
}

model UserTokens {
  id               Int       @id @default(autoincrement())
  userId           Int?      @map("user_id")
  accessToken      String    @map("access_token")
  refreshToken     String    @map("refresh_token")
  accessExpiresAt  DateTime  @map("access_expires_at") @db.Timestamp(6)
  refreshExpiresAt DateTime  @map("refresh_expires_at") @db.Timestamp(6)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  users            Users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_tokens")
}

model Users {
  id                                    Int             @id @default(autoincrement())
  username                              String          @db.VarChar(50)
  email                                 String?         @unique @db.VarChar(100)
  password                              String?         @db.VarChar(255)
  createdAt                             DateTime?       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                             DateTime?       @default(now()) @map("updated_at") @db.Timestamp(6)
  busCrews                              BusCrews[]
  buses                                 Buses[]
  friendshipsFriendshipsFriendIdTousers Friendships[]   @relation("friendships_friend_idTousers")
  friendshipsFriendshipsUserIdTousers   Friendships[]   @relation("friendships_user_idTousers")
  notifications                         Notifications[]
  socialUsers                           SocialUsers[]
  userTokens                            UserTokens[]

  @@map("users")
}

model SocialUsers {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  provider        String
  socialId        String    @unique @map("social_id")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  nickname        String
  profileImageUrl String?   @map("profile_image_url")
  email           String?
  users           Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("social_users")
}

enum BusStatusTypes {
  open
  closed
  approaching
  full
  canceled

  @@map("bus_status_types")
}

enum FriendshipStatusTypes {
  pending
  accepted
  denied

  @@map("friendship_status_types")
}
